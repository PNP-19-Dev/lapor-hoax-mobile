/*
 * Created by andii on 15/11/21 14.33
 * Copyright (c) 2021 . All rights reserved.
 * Last modified 15/11/21 14.31
 */

// Mocks generated by Mockito 5.0.16 from annotations
// in laporhoax/test/data/datasources/remote_data_source_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;
import 'dart:convert' as _i5;
import 'dart:typed_data' as _i6;

import 'package:cross_file/src/types/interface.dart' as _i4;
import 'package:dio/src/multipart_file.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDateTime_0 extends _i1.Fake implements DateTime {}

/// A class which mocks [MultipartFile].
///
/// See the documentation for Mockito's code generation for more information.
class MockMultipartFile extends _i1.Mock implements _i2.MultipartFile {
  MockMultipartFile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get length =>
      (super.noSuchMethod(Invocation.getter(#length), returnValue: 0) as int);
  @override
  bool get isFinalized =>
      (super.noSuchMethod(Invocation.getter(#isFinalized), returnValue: false)
          as bool);
  @override
  _i3.Stream<List<int>> finalize() =>
      (super.noSuchMethod(Invocation.method(#finalize, []),
          returnValue: Stream<List<int>>.empty()) as _i3.Stream<List<int>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [XFile].
///
/// See the documentation for Mockito's code generation for more information.
class MockXFile extends _i1.Mock implements _i4.XFile {
  MockXFile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  _i3.Future<void> saveTo(String? path) =>
      (super.noSuchMethod(Invocation.method(#saveTo, [path]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<int> length() =>
      (super.noSuchMethod(Invocation.method(#length, []),
          returnValue: Future<int>.value(0)) as _i3.Future<int>);
  @override
  _i3.Future<String> readAsString(
          {_i5.Encoding? encoding = const _i5.Utf8Codec()}) =>
      (super.noSuchMethod(
          Invocation.method(#readAsString, [], {#encoding: encoding}),
          returnValue: Future<String>.value('')) as _i3.Future<String>);
  @override
  _i3.Future<_i6.Uint8List> readAsBytes() =>
      (super.noSuchMethod(Invocation.method(#readAsBytes, []),
              returnValue: Future<_i6.Uint8List>.value(_i6.Uint8List(0)))
          as _i3.Future<_i6.Uint8List>);
  @override
  _i3.Stream<_i6.Uint8List> openRead([int? start, int? end]) =>
      (super.noSuchMethod(Invocation.method(#openRead, [start, end]),
              returnValue: Stream<_i6.Uint8List>.empty())
          as _i3.Stream<_i6.Uint8List>);
  @override
  _i3.Future<DateTime> lastModified() =>
      (super.noSuchMethod(Invocation.method(#lastModified, []),
              returnValue: Future<DateTime>.value(_FakeDateTime_0()))
          as _i3.Future<DateTime>);
  @override
  String toString() => super.toString();
}
