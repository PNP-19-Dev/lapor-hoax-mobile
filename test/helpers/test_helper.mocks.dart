/*
 * Created by andii on 15/11/21 12.51
 * Copyright (c) 2021 . All rights reserved.
 * Last modified 15/11/21 12.35
 */

// Mocks generated by Mockito 5.0.16 from annotations
// in laporhoax/test/helpers/test_helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i12;

import 'package:bloc/bloc.dart' as _i53;
import 'package:dartz/dartz.dart' as _i2;
import 'package:data_connection_checker/data_connection_checker.dart' as _i10;
import 'package:dio/dio.dart' as _i48;
import 'package:image_picker/image_picker.dart' as _i23;
import 'package:laporhoax/data/datasources/api/dio_client.dart' as _i47;
import 'package:laporhoax/data/datasources/db/database_helper.dart' as _i49;
import 'package:laporhoax/data/datasources/local_data_source.dart' as _i43;
import 'package:laporhoax/data/datasources/preferences/preferences_helper.dart'
    as _i51;
import 'package:laporhoax/data/datasources/remote_data_source.dart' as _i39;
import 'package:laporhoax/data/models/category_model.dart' as _i40;
import 'package:laporhoax/data/models/category_table.dart' as _i46;
import 'package:laporhoax/data/models/feed_model.dart' as _i3;
import 'package:laporhoax/data/models/feed_table.dart' as _i44;
import 'package:laporhoax/data/models/question_model.dart' as _i41;
import 'package:laporhoax/data/models/question_table.dart' as _i45;
import 'package:laporhoax/data/models/register.dart' as _i37;
import 'package:laporhoax/data/models/register_model.dart' as _i42;
import 'package:laporhoax/data/models/register_response.dart' as _i7;
import 'package:laporhoax/data/models/report_model.dart' as _i8;
import 'package:laporhoax/data/models/report_request.dart' as _i38;
import 'package:laporhoax/data/models/token_id.dart' as _i54;
import 'package:laporhoax/data/models/user_model.dart' as _i4;
import 'package:laporhoax/data/models/user_question_model.dart' as _i5;
import 'package:laporhoax/data/models/user_token_model.dart' as _i6;
import 'package:laporhoax/domain/entities/category.dart' as _i28;
import 'package:laporhoax/domain/entities/feed.dart' as _i29;
import 'package:laporhoax/domain/entities/question.dart' as _i30;
import 'package:laporhoax/domain/entities/register_data.dart' as _i36;
import 'package:laporhoax/domain/entities/report.dart' as _i31;
import 'package:laporhoax/domain/entities/session_data.dart' as _i32;
import 'package:laporhoax/domain/entities/user.dart' as _i33;
import 'package:laporhoax/domain/entities/user_question.dart' as _i34;
import 'package:laporhoax/domain/entities/user_token.dart' as _i35;
import 'package:laporhoax/domain/repositories/repository.dart' as _i26;
import 'package:laporhoax/presentation/provider/about_cubit.dart' as _i25;
import 'package:laporhoax/presentation/provider/account_cubit.dart' as _i13;
import 'package:laporhoax/presentation/provider/detail_cubit.dart' as _i11;
import 'package:laporhoax/presentation/provider/feed_cubit.dart' as _i15;
import 'package:laporhoax/presentation/provider/history_cubit.dart' as _i16;
import 'package:laporhoax/presentation/provider/item_cubit.dart' as _i17;
import 'package:laporhoax/presentation/provider/login_cubit.dart' as _i18;
import 'package:laporhoax/presentation/provider/password_cubit.dart' as _i19;
import 'package:laporhoax/presentation/provider/profile_cubit.dart' as _i14;
import 'package:laporhoax/presentation/provider/question_cubit.dart' as _i20;
import 'package:laporhoax/presentation/provider/register_cubit.dart' as _i21;
import 'package:laporhoax/presentation/provider/report_cubit.dart' as _i22;
import 'package:laporhoax/presentation/provider/saved_feed_cubit.dart' as _i24;
import 'package:laporhoax/utils/failure.dart' as _i27;
import 'package:laporhoax/utils/network_info_impl.dart' as _i52;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences/shared_preferences.dart' as _i9;
import 'package:sqflite/sqflite.dart' as _i50;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeFeedModel_1 extends _i1.Fake implements _i3.FeedModel {}

class _FakeUserModel_2 extends _i1.Fake implements _i4.UserModel {}

class _FakeUserQuestionModel_3 extends _i1.Fake
    implements _i5.UserQuestionModel {}

class _FakeUserTokenModel_4 extends _i1.Fake implements _i6.UserTokenModel {}

class _FakeRegisterResponse_5 extends _i1.Fake implements _i7.RegisterResponse {
}

class _FakeReportModel_6 extends _i1.Fake implements _i8.ReportModel {}

class _FakeSharedPreferences_7 extends _i1.Fake
    implements _i9.SharedPreferences {}

class _FakeDuration_8 extends _i1.Fake implements Duration {}

class _FakeAddressCheckResult_9 extends _i1.Fake
    implements _i10.AddressCheckResult {}

class _FakeDetailState_10 extends _i1.Fake implements _i11.DetailState {}

class _FakeStreamSubscription_11<T> extends _i1.Fake
    implements _i12.StreamSubscription<T> {}

class _FakeAccountState_12 extends _i1.Fake implements _i13.AccountState {}

class _FakeProfileState_13 extends _i1.Fake implements _i14.ProfileState {}

class _FakeFeedState_14 extends _i1.Fake implements _i15.FeedState {}

class _FakeHistoryState_15 extends _i1.Fake implements _i16.HistoryState {}

class _FakeItemState_16 extends _i1.Fake implements _i17.ItemState {}

class _FakeLoginState_17 extends _i1.Fake implements _i18.LoginState {}

class _FakePasswordState_18 extends _i1.Fake implements _i19.PasswordState {}

class _FakeQuestionState_19 extends _i1.Fake implements _i20.QuestionState {}

class _FakeRegisterState_20 extends _i1.Fake implements _i21.RegisterState {}

class _FakeReportState_21 extends _i1.Fake implements _i22.ReportState {}

class _FakeXFile_22 extends _i1.Fake implements _i23.XFile {}

class _FakeSavedFeedState_23 extends _i1.Fake implements _i24.SavedFeedState {}

class _FakeAboutState_24 extends _i1.Fake implements _i25.AboutState {}

/// A class which mocks [Repository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepository extends _i1.Mock implements _i26.Repository {
  MockRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i2.Either<_i27.Failure, String>> deleteReport(
          String? token, int? id) =>
      (super.noSuchMethod(Invocation.method(#deleteReport, [token, id]),
              returnValue: Future<_i2.Either<_i27.Failure, String>>.value(
                  _FakeEither_0<_i27.Failure, String>()))
          as _i12.Future<_i2.Either<_i27.Failure, String>>);
  @override
  _i12.Future<_i2.Either<_i27.Failure, List<_i28.Category>>> getCategories() =>
      (super.noSuchMethod(Invocation.method(#getCategories, []),
              returnValue:
                  Future<_i2.Either<_i27.Failure, List<_i28.Category>>>.value(
                      _FakeEither_0<_i27.Failure, List<_i28.Category>>()))
          as _i12.Future<_i2.Either<_i27.Failure, List<_i28.Category>>>);
  @override
  _i12.Future<bool> isAddedToSavedFeed(int? id) =>
      (super.noSuchMethod(Invocation.method(#isAddedToSavedFeed, [id]),
          returnValue: Future<bool>.value(false)) as _i12.Future<bool>);
  @override
  _i12.Future<bool> isSessionActivated() =>
      (super.noSuchMethod(Invocation.method(#isSessionActivated, []),
          returnValue: Future<bool>.value(false)) as _i12.Future<bool>);
  @override
  _i12.Future<_i2.Either<_i27.Failure, List<_i29.Feed>>> getFeeds() =>
      (super.noSuchMethod(Invocation.method(#getFeeds, []),
          returnValue: Future<_i2.Either<_i27.Failure, List<_i29.Feed>>>.value(
              _FakeEither_0<_i27.Failure, List<_i29.Feed>>())) as _i12
          .Future<_i2.Either<_i27.Failure, List<_i29.Feed>>>);
  @override
  _i12.Future<_i2.Either<_i27.Failure, _i29.Feed>> getFeedDetail(int? id) =>
      (super.noSuchMethod(Invocation.method(#getFeedDetail, [id]),
              returnValue: Future<_i2.Either<_i27.Failure, _i29.Feed>>.value(
                  _FakeEither_0<_i27.Failure, _i29.Feed>()))
          as _i12.Future<_i2.Either<_i27.Failure, _i29.Feed>>);
  @override
  _i12.Future<_i2.Either<_i27.Failure, String>> getPasswordReset(
          String? email) =>
      (super.noSuchMethod(Invocation.method(#getPasswordReset, [email]),
              returnValue: Future<_i2.Either<_i27.Failure, String>>.value(
                  _FakeEither_0<_i27.Failure, String>()))
          as _i12.Future<_i2.Either<_i27.Failure, String>>);
  @override
  _i12.Future<_i2.Either<_i27.Failure, List<_i30.Question>>> getQuestions() =>
      (super.noSuchMethod(Invocation.method(#getQuestions, []),
              returnValue:
                  Future<_i2.Either<_i27.Failure, List<_i30.Question>>>.value(
                      _FakeEither_0<_i27.Failure, List<_i30.Question>>()))
          as _i12.Future<_i2.Either<_i27.Failure, List<_i30.Question>>>);
  @override
  _i12.Future<_i2.Either<_i27.Failure, List<_i31.Report>>> getReports(
          String? token, int? id) =>
      (super.noSuchMethod(Invocation.method(#getReports, [token, id]),
              returnValue:
                  Future<_i2.Either<_i27.Failure, List<_i31.Report>>>.value(
                      _FakeEither_0<_i27.Failure, List<_i31.Report>>()))
          as _i12.Future<_i2.Either<_i27.Failure, List<_i31.Report>>>);
  @override
  _i12.Future<_i2.Either<_i27.Failure, List<_i29.Feed>>> getSavedFeeds() =>
      (super.noSuchMethod(Invocation.method(#getSavedFeeds, []),
          returnValue: Future<_i2.Either<_i27.Failure, List<_i29.Feed>>>.value(
              _FakeEither_0<_i27.Failure, List<_i29.Feed>>())) as _i12
          .Future<_i2.Either<_i27.Failure, List<_i29.Feed>>>);
  @override
  _i12.Future<_i2.Either<_i27.Failure, _i32.SessionData>> getSessionData() =>
      (super.noSuchMethod(Invocation.method(#getSessionData, []),
          returnValue: Future<_i2.Either<_i27.Failure, _i32.SessionData>>.value(
              _FakeEither_0<_i27.Failure, _i32.SessionData>())) as _i12
          .Future<_i2.Either<_i27.Failure, _i32.SessionData>>);
  @override
  _i12.Future<_i2.Either<_i27.Failure, _i33.User>> getUser(String? email) =>
      (super.noSuchMethod(Invocation.method(#getUser, [email]),
              returnValue: Future<_i2.Either<_i27.Failure, _i33.User>>.value(
                  _FakeEither_0<_i27.Failure, _i33.User>()))
          as _i12.Future<_i2.Either<_i27.Failure, _i33.User>>);
  @override
  _i12.Future<_i2.Either<_i27.Failure, _i34.UserQuestion>> getUserChallenge(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#getUserChallenge, [id]),
              returnValue:
                  Future<_i2.Either<_i27.Failure, _i34.UserQuestion>>.value(
                      _FakeEither_0<_i27.Failure, _i34.UserQuestion>()))
          as _i12.Future<_i2.Either<_i27.Failure, _i34.UserQuestion>>);
  @override
  _i12.Future<_i2.Either<_i27.Failure, String>> putPassword(
          String? oldPass, String? newPass, String? token) =>
      (super.noSuchMethod(
              Invocation.method(#putPassword, [oldPass, newPass, token]),
              returnValue: Future<_i2.Either<_i27.Failure, String>>.value(
                  _FakeEither_0<_i27.Failure, String>()))
          as _i12.Future<_i2.Either<_i27.Failure, String>>);
  @override
  _i12.Future<_i2.Either<_i27.Failure, String>> postFCMToken(
          int? user, String? fcmToken) =>
      (super.noSuchMethod(Invocation.method(#postFCMToken, [user, fcmToken]),
              returnValue: Future<_i2.Either<_i27.Failure, String>>.value(
                  _FakeEither_0<_i27.Failure, String>()))
          as _i12.Future<_i2.Either<_i27.Failure, String>>);
  @override
  _i12.Future<_i2.Either<_i27.Failure, String>> putFCMToken(
          int? user, String? fcmToken) =>
      (super.noSuchMethod(Invocation.method(#putFCMToken, [user, fcmToken]),
              returnValue: Future<_i2.Either<_i27.Failure, String>>.value(
                  _FakeEither_0<_i27.Failure, String>()))
          as _i12.Future<_i2.Either<_i27.Failure, String>>);
  @override
  _i12.Future<_i2.Either<_i27.Failure, _i35.UserToken>> postLogin(
          String? username, String? password) =>
      (super.noSuchMethod(Invocation.method(#postLogin, [username, password]),
          returnValue: Future<_i2.Either<_i27.Failure, _i35.UserToken>>.value(
              _FakeEither_0<_i27.Failure, _i35.UserToken>())) as _i12
          .Future<_i2.Either<_i27.Failure, _i35.UserToken>>);
  @override
  _i12.Future<_i2.Either<_i27.Failure, _i36.RegisterData>> postRegister(
          _i37.Register? user) =>
      (super.noSuchMethod(Invocation.method(#postRegister, [user]),
              returnValue:
                  Future<_i2.Either<_i27.Failure, _i36.RegisterData>>.value(
                      _FakeEither_0<_i27.Failure, _i36.RegisterData>()))
          as _i12.Future<_i2.Either<_i27.Failure, _i36.RegisterData>>);
  @override
  _i12.Future<_i2.Either<_i27.Failure, _i31.Report>> postReport(
          String? token, _i38.ReportRequest? report) =>
      (super.noSuchMethod(Invocation.method(#postReport, [token, report]),
              returnValue: Future<_i2.Either<_i27.Failure, _i31.Report>>.value(
                  _FakeEither_0<_i27.Failure, _i31.Report>()))
          as _i12.Future<_i2.Either<_i27.Failure, _i31.Report>>);
  @override
  _i12.Future<_i2.Either<_i27.Failure, String>> postUserChallenge(
          _i34.UserQuestion? challenge) =>
      (super.noSuchMethod(Invocation.method(#postUserChallenge, [challenge]),
              returnValue: Future<_i2.Either<_i27.Failure, String>>.value(
                  _FakeEither_0<_i27.Failure, String>()))
          as _i12.Future<_i2.Either<_i27.Failure, String>>);
  @override
  _i12.Future<_i2.Either<_i27.Failure, String>> removeFeed(_i29.Feed? feed) =>
      (super.noSuchMethod(Invocation.method(#removeFeed, [feed]),
              returnValue: Future<_i2.Either<_i27.Failure, String>>.value(
                  _FakeEither_0<_i27.Failure, String>()))
          as _i12.Future<_i2.Either<_i27.Failure, String>>);
  @override
  _i12.Future<String> removeSessionData(_i32.SessionData? data) =>
      (super.noSuchMethod(Invocation.method(#removeSessionData, [data]),
          returnValue: Future<String>.value('')) as _i12.Future<String>);
  @override
  _i12.Future<_i2.Either<_i27.Failure, String>> saveFeed(_i29.Feed? feed) =>
      (super.noSuchMethod(Invocation.method(#saveFeed, [feed]),
              returnValue: Future<_i2.Either<_i27.Failure, String>>.value(
                  _FakeEither_0<_i27.Failure, String>()))
          as _i12.Future<_i2.Either<_i27.Failure, String>>);
  @override
  _i12.Future<String> saveSessionData(
          {int? id,
          String? expiry,
          String? token,
          String? email,
          String? username}) =>
      (super.noSuchMethod(
          Invocation.method(#saveSessionData, [], {
            #id: id,
            #expiry: expiry,
            #token: token,
            #email: email,
            #username: username
          }),
          returnValue: Future<String>.value('')) as _i12.Future<String>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i39.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<List<_i40.CategoryModel>> getCategory() => (super.noSuchMethod(
          Invocation.method(#getCategory, []),
          returnValue:
              Future<List<_i40.CategoryModel>>.value(<_i40.CategoryModel>[]))
      as _i12.Future<List<_i40.CategoryModel>>);
  @override
  _i12.Future<_i3.FeedModel> getFeedDetail(int? id) =>
      (super.noSuchMethod(Invocation.method(#getFeedDetail, [id]),
              returnValue: Future<_i3.FeedModel>.value(_FakeFeedModel_1()))
          as _i12.Future<_i3.FeedModel>);
  @override
  _i12.Future<List<_i3.FeedModel>> getFeeds() =>
      (super.noSuchMethod(Invocation.method(#getFeeds, []),
              returnValue: Future<List<_i3.FeedModel>>.value(<_i3.FeedModel>[]))
          as _i12.Future<List<_i3.FeedModel>>);
  @override
  _i12.Future<String> getPasswordReset(String? email) =>
      (super.noSuchMethod(Invocation.method(#getPasswordReset, [email]),
          returnValue: Future<String>.value('')) as _i12.Future<String>);
  @override
  _i12.Future<List<_i41.QuestionModel>> getQuestions() => (super.noSuchMethod(
          Invocation.method(#getQuestions, []),
          returnValue:
              Future<List<_i41.QuestionModel>>.value(<_i41.QuestionModel>[]))
      as _i12.Future<List<_i41.QuestionModel>>);
  @override
  _i12.Future<List<_i8.ReportModel>> getReport(String? token, int? id) =>
      (super.noSuchMethod(Invocation.method(#getReport, [token, id]),
              returnValue:
                  Future<List<_i8.ReportModel>>.value(<_i8.ReportModel>[]))
          as _i12.Future<List<_i8.ReportModel>>);
  @override
  _i12.Future<_i4.UserModel> getUser(String? email) =>
      (super.noSuchMethod(Invocation.method(#getUser, [email]),
              returnValue: Future<_i4.UserModel>.value(_FakeUserModel_2()))
          as _i12.Future<_i4.UserModel>);
  @override
  _i12.Future<_i5.UserQuestionModel> getUserQuestions(int? id) =>
      (super.noSuchMethod(Invocation.method(#getUserQuestions, [id]),
              returnValue: Future<_i5.UserQuestionModel>.value(
                  _FakeUserQuestionModel_3()))
          as _i12.Future<_i5.UserQuestionModel>);
  @override
  _i12.Future<_i6.UserTokenModel> postLogin(
          String? username, String? password) =>
      (super.noSuchMethod(Invocation.method(#postLogin, [username, password]),
              returnValue:
                  Future<_i6.UserTokenModel>.value(_FakeUserTokenModel_4()))
          as _i12.Future<_i6.UserTokenModel>);
  @override
  _i12.Future<_i7.RegisterResponse> postRegister(_i42.RegisterModel? user) =>
      (super.noSuchMethod(Invocation.method(#postRegister, [user]),
              returnValue:
                  Future<_i7.RegisterResponse>.value(_FakeRegisterResponse_5()))
          as _i12.Future<_i7.RegisterResponse>);
  @override
  _i12.Future<String> postFcmToken(String? user, String? fcmToken) =>
      (super.noSuchMethod(Invocation.method(#postFcmToken, [user, fcmToken]),
          returnValue: Future<String>.value('')) as _i12.Future<String>);
  @override
  _i12.Future<_i8.ReportModel> postReport(
          String? token, _i38.ReportRequest? report) =>
      (super.noSuchMethod(Invocation.method(#postReport, [token, report]),
              returnValue: Future<_i8.ReportModel>.value(_FakeReportModel_6()))
          as _i12.Future<_i8.ReportModel>);
  @override
  _i12.Future<String> postChallenge(_i5.UserQuestionModel? challenge) =>
      (super.noSuchMethod(Invocation.method(#postChallenge, [challenge]),
          returnValue: Future<String>.value('')) as _i12.Future<String>);
  @override
  _i12.Future<String> putPassword(
          String? oldPass, String? newPass, String? token) =>
      (super.noSuchMethod(
          Invocation.method(#putPassword, [oldPass, newPass, token]),
          returnValue: Future<String>.value('')) as _i12.Future<String>);
  @override
  _i12.Future<String> putFcmToken(String? user, String? fcmToken) =>
      (super.noSuchMethod(Invocation.method(#putFcmToken, [user, fcmToken]),
          returnValue: Future<String>.value('')) as _i12.Future<String>);
  @override
  _i12.Future<String> deleteReport(String? token, int? id) =>
      (super.noSuchMethod(Invocation.method(#deleteReport, [token, id]),
          returnValue: Future<String>.value('')) as _i12.Future<String>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDataSource extends _i1.Mock implements _i43.LocalDataSource {
  MockLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<String> insertFeed(_i44.FeedTable? feed) =>
      (super.noSuchMethod(Invocation.method(#insertFeed, [feed]),
          returnValue: Future<String>.value('')) as _i12.Future<String>);
  @override
  _i12.Future<String> removeFeed(_i44.FeedTable? feed) =>
      (super.noSuchMethod(Invocation.method(#removeFeed, [feed]),
          returnValue: Future<String>.value('')) as _i12.Future<String>);
  @override
  _i12.Future<_i44.FeedTable?> getFeedById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getFeedById, [id]),
              returnValue: Future<_i44.FeedTable?>.value())
          as _i12.Future<_i44.FeedTable?>);
  @override
  _i12.Future<List<_i44.FeedTable>> getFeeds() => (super.noSuchMethod(
          Invocation.method(#getFeeds, []),
          returnValue: Future<List<_i44.FeedTable>>.value(<_i44.FeedTable>[]))
      as _i12.Future<List<_i44.FeedTable>>);
  @override
  _i12.Future<bool> isLoggedIn() =>
      (super.noSuchMethod(Invocation.method(#isLoggedIn, []),
          returnValue: Future<bool>.value(false)) as _i12.Future<bool>);
  @override
  _i12.Future<_i32.SessionData?> getSession() =>
      (super.noSuchMethod(Invocation.method(#getSession, []),
              returnValue: Future<_i32.SessionData?>.value())
          as _i12.Future<_i32.SessionData?>);
  @override
  _i12.Future<String> insertSession(
          {int? id,
          String? expiry,
          String? token,
          String? email,
          String? username}) =>
      (super.noSuchMethod(
          Invocation.method(#insertSession, [], {
            #id: id,
            #expiry: expiry,
            #token: token,
            #email: email,
            #username: username
          }),
          returnValue: Future<String>.value('')) as _i12.Future<String>);
  @override
  _i12.Future<String> removeSession(_i32.SessionData? data) =>
      (super.noSuchMethod(Invocation.method(#removeSession, [data]),
          returnValue: Future<String>.value('')) as _i12.Future<String>);
  @override
  _i12.Future<void> cacheQuestions(List<_i45.QuestionTable>? questions) =>
      (super.noSuchMethod(Invocation.method(#cacheQuestions, [questions]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i12.Future<void>);
  @override
  _i12.Future<List<_i45.QuestionTable>> getCachedQuestion() =>
      (super.noSuchMethod(Invocation.method(#getCachedQuestion, []),
              returnValue: Future<List<_i45.QuestionTable>>.value(
                  <_i45.QuestionTable>[]))
          as _i12.Future<List<_i45.QuestionTable>>);
  @override
  _i12.Future<void> cacheCategory(List<_i46.CategoryTable>? category) =>
      (super.noSuchMethod(Invocation.method(#cacheCategory, [category]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i12.Future<void>);
  @override
  _i12.Future<List<_i46.CategoryTable>> getCachedCategory() =>
      (super.noSuchMethod(Invocation.method(#getCachedCategory, []),
              returnValue: Future<List<_i46.CategoryTable>>.value(
                  <_i46.CategoryTable>[]))
          as _i12.Future<List<_i46.CategoryTable>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [DioClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioClient extends _i1.Mock implements _i47.DioClient {
  MockDioClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<dynamic> get(String? uri, {Map<String, dynamic>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [uri], {#headers: headers}),
          returnValue: Future<dynamic>.value()) as _i12.Future<dynamic>);
  @override
  _i12.Future<dynamic> post(String? uri,
          {dynamic data, Map<String, dynamic>? headers}) =>
      (super.noSuchMethod(
          Invocation.method(#post, [uri], {#data: data, #headers: headers}),
          returnValue: Future<dynamic>.value()) as _i12.Future<dynamic>);
  @override
  _i12.Future<dynamic> put(String? uri,
          {dynamic data, Map<String, dynamic>? headers}) =>
      (super.noSuchMethod(
          Invocation.method(#put, [uri], {#data: data, #headers: headers}),
          returnValue: Future<dynamic>.value()) as _i12.Future<dynamic>);
  @override
  _i12.Future<dynamic> delete(String? uri,
          {dynamic data, Map<String, dynamic>? headers}) =>
      (super.noSuchMethod(
          Invocation.method(#delete, [uri], {#data: data, #headers: headers}),
          returnValue: Future<dynamic>.value()) as _i12.Future<dynamic>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MultipartFile].
///
/// See the documentation for Mockito's code generation for more information.
class MockMultipartFile extends _i1.Mock implements _i48.MultipartFile {
  MockMultipartFile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get length =>
      (super.noSuchMethod(Invocation.getter(#length), returnValue: 0) as int);
  @override
  bool get isFinalized =>
      (super.noSuchMethod(Invocation.getter(#isFinalized), returnValue: false)
          as bool);
  @override
  _i12.Stream<List<int>> finalize() =>
      (super.noSuchMethod(Invocation.method(#finalize, []),
          returnValue: Stream<List<int>>.empty()) as _i12.Stream<List<int>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i49.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i50.Database?> get database =>
      (super.noSuchMethod(Invocation.getter(#database),
              returnValue: Future<_i50.Database?>.value())
          as _i12.Future<_i50.Database?>);
  @override
  _i12.Future<void> insertNews(_i44.FeedTable? feed) => (super.noSuchMethod(
      Invocation.method(#insertNews, [feed]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  _i12.Future<List<Map<String, dynamic>>> getFeeds() =>
      (super.noSuchMethod(Invocation.method(#getFeeds, []),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as _i12.Future<List<Map<String, dynamic>>>);
  @override
  _i12.Future<Map<String, dynamic>?> getFeedById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getFeedById, [id]),
              returnValue: Future<Map<String, dynamic>?>.value())
          as _i12.Future<Map<String, dynamic>?>);
  @override
  _i12.Future<void> removeFeed(_i44.FeedTable? feed) => (super.noSuchMethod(
      Invocation.method(#removeFeed, [feed]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  _i12.Future<void> insertQuestionTransaction(
          List<_i45.QuestionTable>? questions) =>
      (super.noSuchMethod(
              Invocation.method(#insertQuestionTransaction, [questions]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i12.Future<void>);
  @override
  _i12.Future<void> insertCategoryTransaction(
          List<_i46.CategoryTable>? categories) =>
      (super.noSuchMethod(
              Invocation.method(#insertCategoryTransaction, [categories]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i12.Future<void>);
  @override
  _i12.Future<List<Map<String, dynamic>>> getQuestionCache() =>
      (super.noSuchMethod(Invocation.method(#getQuestionCache, []),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as _i12.Future<List<Map<String, dynamic>>>);
  @override
  _i12.Future<List<Map<String, dynamic>>> getCategoryCache() =>
      (super.noSuchMethod(Invocation.method(#getCategoryCache, []),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as _i12.Future<List<Map<String, dynamic>>>);
  @override
  _i12.Future<int> clearQuestionCache() =>
      (super.noSuchMethod(Invocation.method(#clearQuestionCache, []),
          returnValue: Future<int>.value(0)) as _i12.Future<int>);
  @override
  _i12.Future<int> clearCategoryCache() =>
      (super.noSuchMethod(Invocation.method(#clearCategoryCache, []),
          returnValue: Future<int>.value(0)) as _i12.Future<int>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PreferencesHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPreferencesHelper extends _i1.Mock implements _i51.PreferencesHelper {
  MockPreferencesHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i9.SharedPreferences> get sharedPreferences =>
      (super.noSuchMethod(Invocation.getter(#sharedPreferences),
              returnValue: Future<_i9.SharedPreferences>.value(
                  _FakeSharedPreferences_7()))
          as _i12.Future<_i9.SharedPreferences>);
  @override
  set sharedPreferences(
          _i12.Future<_i9.SharedPreferences>? _sharedPreferences) =>
      super.noSuchMethod(
          Invocation.setter(#sharedPreferences, _sharedPreferences),
          returnValueForMissingStub: null);
  @override
  _i12.Future<String> get expireDate =>
      (super.noSuchMethod(Invocation.getter(#expireDate),
          returnValue: Future<String>.value('')) as _i12.Future<String>);
  @override
  _i12.Future<String> get token =>
      (super.noSuchMethod(Invocation.getter(#token),
          returnValue: Future<String>.value('')) as _i12.Future<String>);
  @override
  _i12.Future<String> get email =>
      (super.noSuchMethod(Invocation.getter(#email),
          returnValue: Future<String>.value('')) as _i12.Future<String>);
  @override
  _i12.Future<int> get id => (super.noSuchMethod(Invocation.getter(#id),
      returnValue: Future<int>.value(0)) as _i12.Future<int>);
  @override
  _i12.Future<bool> get isLogin =>
      (super.noSuchMethod(Invocation.getter(#isLogin),
          returnValue: Future<bool>.value(false)) as _i12.Future<bool>);
  @override
  void setExpire(String? value) =>
      super.noSuchMethod(Invocation.method(#setExpire, [value]),
          returnValueForMissingStub: null);
  @override
  void setToken(String? value) =>
      super.noSuchMethod(Invocation.method(#setToken, [value]),
          returnValueForMissingStub: null);
  @override
  void setEmail(String? value) =>
      super.noSuchMethod(Invocation.method(#setEmail, [value]),
          returnValueForMissingStub: null);
  @override
  void setId(int? value) =>
      super.noSuchMethod(Invocation.method(#setId, [value]),
          returnValueForMissingStub: null);
  @override
  void setUsername(String? value) =>
      super.noSuchMethod(Invocation.method(#setUsername, [value]),
          returnValueForMissingStub: null);
  @override
  void setLogin(bool? value) =>
      super.noSuchMethod(Invocation.method(#setLogin, [value]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [DataConnectionChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataConnectionChecker extends _i1.Mock
    implements _i10.DataConnectionChecker {
  MockDataConnectionChecker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i10.AddressCheckOptions> get addresses =>
      (super.noSuchMethod(Invocation.getter(#addresses),
              returnValue: <_i10.AddressCheckOptions>[])
          as List<_i10.AddressCheckOptions>);
  @override
  set addresses(List<_i10.AddressCheckOptions>? _addresses) =>
      super.noSuchMethod(Invocation.setter(#addresses, _addresses),
          returnValueForMissingStub: null);
  @override
  Duration get checkInterval =>
      (super.noSuchMethod(Invocation.getter(#checkInterval),
          returnValue: _FakeDuration_8()) as Duration);
  @override
  set checkInterval(Duration? _checkInterval) =>
      super.noSuchMethod(Invocation.setter(#checkInterval, _checkInterval),
          returnValueForMissingStub: null);
  @override
  List<_i10.AddressCheckResult> get lastTryResults =>
      (super.noSuchMethod(Invocation.getter(#lastTryResults),
              returnValue: <_i10.AddressCheckResult>[])
          as List<_i10.AddressCheckResult>);
  @override
  _i12.Future<bool> get hasConnection =>
      (super.noSuchMethod(Invocation.getter(#hasConnection),
          returnValue: Future<bool>.value(false)) as _i12.Future<bool>);
  @override
  _i12.Future<_i10.DataConnectionStatus> get connectionStatus =>
      (super.noSuchMethod(Invocation.getter(#connectionStatus),
              returnValue: Future<_i10.DataConnectionStatus>.value(
                  _i10.DataConnectionStatus.disconnected))
          as _i12.Future<_i10.DataConnectionStatus>);
  @override
  _i12.Stream<_i10.DataConnectionStatus> get onStatusChange =>
      (super.noSuchMethod(Invocation.getter(#onStatusChange),
              returnValue: Stream<_i10.DataConnectionStatus>.empty())
          as _i12.Stream<_i10.DataConnectionStatus>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  bool get isActivelyChecking =>
      (super.noSuchMethod(Invocation.getter(#isActivelyChecking),
          returnValue: false) as bool);
  @override
  _i12.Future<_i10.AddressCheckResult> isHostReachable(
          _i10.AddressCheckOptions? options) =>
      (super.noSuchMethod(Invocation.method(#isHostReachable, [options]),
              returnValue: Future<_i10.AddressCheckResult>.value(
                  _FakeAddressCheckResult_9()))
          as _i12.Future<_i10.AddressCheckResult>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i52.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i12.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [DetailCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockDetailCubit extends _i1.Mock implements _i11.DetailCubit {
  MockDetailCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.DetailState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeDetailState_10()) as _i11.DetailState);
  @override
  _i12.Stream<_i11.DetailState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i11.DetailState>.empty())
          as _i12.Stream<_i11.DetailState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i12.Future<void> fetchDetail(int? id) => (super.noSuchMethod(
      Invocation.method(#fetchDetail, [id]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  _i12.StreamSubscription<_i11.DetailState> listen(
          void Function(_i11.DetailState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_11<_i11.DetailState>())
          as _i12.StreamSubscription<_i11.DetailState>);
  @override
  void emit(_i11.DetailState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i53.Change<_i11.DetailState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i12.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AccountCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountCubit extends _i1.Mock implements _i13.AccountCubit {
  MockAccountCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.AccountState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeAccountState_12()) as _i13.AccountState);
  @override
  _i12.Stream<_i13.AccountState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i13.AccountState>.empty())
          as _i12.Stream<_i13.AccountState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i12.Future<void> fetchSession() => (super.noSuchMethod(
      Invocation.method(#fetchSession, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  _i12.StreamSubscription<_i13.AccountState> listen(
          void Function(_i13.AccountState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_11<_i13.AccountState>())
          as _i12.StreamSubscription<_i13.AccountState>);
  @override
  void emit(_i13.AccountState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i53.Change<_i13.AccountState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i12.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ProfileCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileCubit extends _i1.Mock implements _i14.ProfileCubit {
  MockProfileCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.ProfileState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeProfileState_13()) as _i14.ProfileState);
  @override
  _i12.Stream<_i14.ProfileState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i14.ProfileState>.empty())
          as _i12.Stream<_i14.ProfileState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i12.Future<void> getData(String? email) => (super.noSuchMethod(
      Invocation.method(#getData, [email]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  _i12.StreamSubscription<_i14.ProfileState> listen(
          void Function(_i14.ProfileState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_11<_i14.ProfileState>())
          as _i12.StreamSubscription<_i14.ProfileState>);
  @override
  void emit(_i14.ProfileState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i53.Change<_i14.ProfileState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i12.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FeedCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockFeedCubit extends _i1.Mock implements _i15.FeedCubit {
  MockFeedCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i15.FeedState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeFeedState_14()) as _i15.FeedState);
  @override
  _i12.Stream<_i15.FeedState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i15.FeedState>.empty())
          as _i12.Stream<_i15.FeedState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i12.Future<void> fetchFeeds() => (super.noSuchMethod(
      Invocation.method(#fetchFeeds, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  _i12.StreamSubscription<_i15.FeedState> listen(
          void Function(_i15.FeedState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_11<_i15.FeedState>())
          as _i12.StreamSubscription<_i15.FeedState>);
  @override
  void emit(_i15.FeedState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i53.Change<_i15.FeedState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i12.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [HistoryCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockHistoryCubit extends _i1.Mock implements _i16.HistoryCubit {
  MockHistoryCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i31.Report> get reports =>
      (super.noSuchMethod(Invocation.getter(#reports),
          returnValue: <_i31.Report>[]) as List<_i31.Report>);
  @override
  _i16.HistoryState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeHistoryState_15()) as _i16.HistoryState);
  @override
  _i12.Stream<_i16.HistoryState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i16.HistoryState>.empty())
          as _i12.Stream<_i16.HistoryState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i12.Future<void> getHistory(_i54.TokenId? tokenId) => (super.noSuchMethod(
      Invocation.method(#getHistory, [tokenId]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  _i12.Future<bool> removeReport(_i54.TokenId? tokenId, String? status) =>
      (super.noSuchMethod(Invocation.method(#removeReport, [tokenId, status]),
          returnValue: Future<bool>.value(false)) as _i12.Future<bool>);
  @override
  _i12.StreamSubscription<_i16.HistoryState> listen(
          void Function(_i16.HistoryState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_11<_i16.HistoryState>())
          as _i12.StreamSubscription<_i16.HistoryState>);
  @override
  void emit(_i16.HistoryState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i53.Change<_i16.HistoryState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i12.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ItemCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockItemCubit extends _i1.Mock implements _i17.ItemCubit {
  MockItemCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i17.ItemState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeItemState_16()) as _i17.ItemState);
  @override
  _i12.Stream<_i17.ItemState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i17.ItemState>.empty())
          as _i12.Stream<_i17.ItemState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i12.Future<void> getStatus(int? id) => (super.noSuchMethod(
      Invocation.method(#getStatus, [id]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  _i12.Future<void> saveFeed(_i29.Feed? feed) => (super.noSuchMethod(
      Invocation.method(#saveFeed, [feed]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  _i12.Future<void> removeFeed(_i29.Feed? feed) => (super.noSuchMethod(
      Invocation.method(#removeFeed, [feed]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  _i12.StreamSubscription<_i17.ItemState> listen(
          void Function(_i17.ItemState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_11<_i17.ItemState>())
          as _i12.StreamSubscription<_i17.ItemState>);
  @override
  void emit(_i17.ItemState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i53.Change<_i17.ItemState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i12.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LoginCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginCubit extends _i1.Mock implements _i18.LoginCubit {
  MockLoginCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i18.LoginState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeLoginState_17()) as _i18.LoginState);
  @override
  _i12.Stream<_i18.LoginState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i18.LoginState>.empty())
          as _i12.Stream<_i18.LoginState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i12.Future<void> login(String? username, String? password) =>
      (super.noSuchMethod(Invocation.method(#login, [username, password]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i12.Future<void>);
  @override
  _i12.Future<void> fetchSession() => (super.noSuchMethod(
      Invocation.method(#fetchSession, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  _i12.Future<void> logout(_i32.SessionData? data) => (super.noSuchMethod(
      Invocation.method(#logout, [data]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  _i12.StreamSubscription<_i18.LoginState> listen(
          void Function(_i18.LoginState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_11<_i18.LoginState>())
          as _i12.StreamSubscription<_i18.LoginState>);
  @override
  void emit(_i18.LoginState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i53.Change<_i18.LoginState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i12.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PasswordCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockPasswordCubit extends _i1.Mock implements _i19.PasswordCubit {
  MockPasswordCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.PasswordState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakePasswordState_18()) as _i19.PasswordState);
  @override
  _i12.Stream<_i19.PasswordState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i19.PasswordState>.empty())
          as _i12.Stream<_i19.PasswordState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i12.Future<void> getUserData(String? email) => (super.noSuchMethod(
      Invocation.method(#getUserData, [email]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  _i12.Future<void> changePassword(
          String? oldPass, String? newPass, String? token) =>
      (super.noSuchMethod(
              Invocation.method(#changePassword, [oldPass, newPass, token]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i12.Future<void>);
  @override
  _i12.Future<void> resetPassword(String? email) => (super.noSuchMethod(
      Invocation.method(#resetPassword, [email]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  _i12.StreamSubscription<_i19.PasswordState> listen(
          void Function(_i19.PasswordState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_11<_i19.PasswordState>())
          as _i12.StreamSubscription<_i19.PasswordState>);
  @override
  void emit(_i19.PasswordState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i53.Change<_i19.PasswordState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i12.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [QuestionCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuestionCubit extends _i1.Mock implements _i20.QuestionCubit {
  MockQuestionCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i20.QuestionState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeQuestionState_19()) as _i20.QuestionState);
  @override
  _i12.Stream<_i20.QuestionState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i20.QuestionState>.empty())
          as _i12.Stream<_i20.QuestionState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i12.Future<void> fetchQuestions() => (super.noSuchMethod(
      Invocation.method(#fetchQuestions, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  _i12.Future<void> fetchQuestionWithChallenge(int? id) => (super.noSuchMethod(
      Invocation.method(#fetchQuestionWithChallenge, [id]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  _i12.Future<void> sendQuestions(_i34.UserQuestion? question) =>
      (super.noSuchMethod(Invocation.method(#sendQuestions, [question]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i12.Future<void>);
  @override
  _i12.StreamSubscription<_i20.QuestionState> listen(
          void Function(_i20.QuestionState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_11<_i20.QuestionState>())
          as _i12.StreamSubscription<_i20.QuestionState>);
  @override
  void emit(_i20.QuestionState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i53.Change<_i20.QuestionState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i12.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [RegisterCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterCubit extends _i1.Mock implements _i21.RegisterCubit {
  MockRegisterCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i21.RegisterState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeRegisterState_20()) as _i21.RegisterState);
  @override
  _i12.Stream<_i21.RegisterState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i21.RegisterState>.empty())
          as _i12.Stream<_i21.RegisterState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i12.Future<void> register(_i37.Register? user) => (super.noSuchMethod(
      Invocation.method(#register, [user]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  _i12.StreamSubscription<_i21.RegisterState> listen(
          void Function(_i21.RegisterState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_11<_i21.RegisterState>())
          as _i12.StreamSubscription<_i21.RegisterState>);
  @override
  void emit(_i21.RegisterState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i53.Change<_i21.RegisterState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i12.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ReportCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockReportCubit extends _i1.Mock implements _i22.ReportCubit {
  MockReportCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i22.ReportState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeReportState_21()) as _i22.ReportState);
  @override
  _i12.Stream<_i22.ReportState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i22.ReportState>.empty())
          as _i12.Stream<_i22.ReportState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i12.Future<_i23.XFile> getImage(_i23.ImageSource? source) =>
      (super.noSuchMethod(Invocation.method(#getImage, [source]),
              returnValue: Future<_i23.XFile>.value(_FakeXFile_22()))
          as _i12.Future<_i23.XFile>);
  @override
  _i12.Future<void> fetchCategory() => (super.noSuchMethod(
      Invocation.method(#fetchCategory, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  _i12.Future<void> sendReport(String? token, int? id, String? url,
          String? desc, _i23.XFile? img, String? category, bool? isAnonym) =>
      (super.noSuchMethod(
              Invocation.method(
                  #sendReport, [token, id, url, desc, img, category, isAnonym]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i12.Future<void>);
  @override
  _i12.StreamSubscription<_i22.ReportState> listen(
          void Function(_i22.ReportState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_11<_i22.ReportState>())
          as _i12.StreamSubscription<_i22.ReportState>);
  @override
  void emit(_i22.ReportState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i53.Change<_i22.ReportState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i12.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SavedFeedCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockSavedFeedCubit extends _i1.Mock implements _i24.SavedFeedCubit {
  MockSavedFeedCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i24.SavedFeedState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeSavedFeedState_23()) as _i24.SavedFeedState);
  @override
  _i12.Stream<_i24.SavedFeedState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i24.SavedFeedState>.empty())
          as _i12.Stream<_i24.SavedFeedState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i12.Future<void> fetchSavedFeeds() => (super.noSuchMethod(
      Invocation.method(#fetchSavedFeeds, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  _i12.StreamSubscription<_i24.SavedFeedState> listen(
          void Function(_i24.SavedFeedState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_11<_i24.SavedFeedState>())
          as _i12.StreamSubscription<_i24.SavedFeedState>);
  @override
  void emit(_i24.SavedFeedState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i53.Change<_i24.SavedFeedState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i12.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AboutCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockAboutCubit extends _i1.Mock implements _i25.AboutCubit {
  MockAboutCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i25.AboutState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeAboutState_24()) as _i25.AboutState);
  @override
  _i12.Stream<_i25.AboutState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i25.AboutState>.empty())
          as _i12.Stream<_i25.AboutState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i12.Future<void> getVersion() => (super.noSuchMethod(
      Invocation.method(#getVersion, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  _i12.StreamSubscription<_i25.AboutState> listen(
          void Function(_i25.AboutState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_11<_i25.AboutState>())
          as _i12.StreamSubscription<_i25.AboutState>);
  @override
  void emit(_i25.AboutState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i53.Change<_i25.AboutState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i12.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  String toString() => super.toString();
}
